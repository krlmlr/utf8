[{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, gender identity expression, level experience, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available http://contributor-covenant.org/version/1/4","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"character-encoding","dir":"Articles","previous_headings":"","what":"Character encoding","title":"Unicode: Emoji, accents, and international text","text":"can analyze text R, first need get digital representation, sequence ones zeros. practice works first choosing encoding text assigns character numerical value, translating sequence characters text corresponding sequence numbers specified encoding. Today, new text encoded according Unicode standard, specifically 8-bit block Unicode Transfer Format, UTF-8. Joel Spolsky gives good overview situation essay 2003. software community mostly moved UTF-8 standard text storage interchange, still large volume text encodings. Whenever read text file R, need specify encoding. don’t, R try guess encoding, guesses incorrectly, wrongly interpret sequence ones zeros. demonstrate difficulties encodings text Jane Austen’s novel, Mansfield Park provided Project Gutenberg. download text, read lines novel. unz function similar file connection functions encoding arguments , left unspecified default assuming text encoded operating system’s native encoding. ensure consistent behavior across platforms (Mac, Windows, Linux), set option explicitly. , set encoding = \"UTF-8\". reasonable default, always appropriate. general, determine appropriate encoding value looking file. Unfortunately, file extension \".txt\" informative, correspond encoding. However, read first lines file, see following: character set encoding reported ASCII, subset UTF-8. , good shape. Unfortunately, run trouble soon try process text: error message tells us line 15252 contains invalid byte. might wonder lines invalid data. can find lines using utf8_valid function: , invalid lines. offending byte line 15252 displayed \\xa3, escape code hexadecimal value 0xa3, decimal value 163. understand invalid, need learn UTF-8 encoding.","code":"# download the zipped text from a Project Gutenberg mirror url <-  \"http://mirror.csclub.uwaterloo.ca/gutenberg/1/4/141/141.zip\" tmp <- tempfile() download.file(url, tmp)  # read the text from the zip file con <- unz(tmp, \"141.txt\", encoding = \"UTF-8\") lines <- readLines(con) close(con) lines[11:20] [1] \"Author: Jane Austen\"                                           [2] \"\"                                                              [3] \"Release Date: June, 1994  [Etext #141]\"                        [4] \"Posting Date: February 11, 2015\"                               [5] \"\"                                                              [6] \"Language: English\"                                             [7] \"\"                                                              [8] \"Character set encoding: ASCII\"                                 [9] \"\"                                                             [10] \"*** START OF THIS PROJECT GUTENBERG EBOOK MANSFIELD PARK ***\" corpus::term_stats(lines) # produces an error Error in corpus::term_stats(lines): argument entry 15252 is incorrectly marked as \"UTF-8\": invalid leading byte (0xA3) at position 36 lines[15252] [1] \"the command of her beauty, and her \\xa320,000, any one who could satisfy the\" lines[!utf8_valid(lines)] [1] \"the command of her beauty, and her \\xa320,000, any one who could satisfy the\""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"ascii","dir":"Articles","previous_headings":"UTF-8","what":"ASCII","title":"Unicode: Emoji, accents, and international text","text":"smallest unit data transfer modern computers byte, sequence eight ones zeros can encode number 0 255 (hexadecimal 0x00 0xff). earliest character encodings, numbers 0 127 (hexadecimal 0x00 0x7f) standardized encoding known ASCII, American Standard Code Information Interchange. characters corresponding codes: first 32 codes (first two rows table) special control codes, common , 0x0a denotes new line (\\n). special code 0x00 often denotes end input, R allow value character strings. Code 0x7f corresponds “delete” control. call utf8_print, uses low level utf8_encode subroutine format control codes; format \\uXXXX four hexadecimal digits XXXX \\UXXXXYYYY eight hexadecimal digits XXXXYYYY: Compare utf8_print output output base R print function: Base R format control codes 128 using octal escapes. differences function highlight .","code":"codes <- matrix(0:127, 8, 16, byrow = TRUE,                 dimnames = list(0:7, c(0:9, letters[1:6]))) ascii <- apply(codes, c(1, 2), intToUtf8)  # replace control codes with \"\" ascii[\"0\", c(0:6, \"e\", \"f\")] <- \"\" ascii[\"1\",] <- \"\" ascii[\"7\", \"f\"] <- \"\"  utf8_print(ascii, quote = FALSE) 0 1 2 3 4 5 6 7  8  9  a  b  c  d  e f 0               \\a \\b \\t \\n \\v \\f \\r     1                                        2   ! \" # $ % & '  (  )  *  +  ,  -  . / 3 0 1 2 3 4 5 6 7  8  9  :  ;  <  =  > ? 4 @ A B C D E F G  H  I  J  K  L  M  N O 5 P Q R S T U V W  X  Y  Z  [  \\\\ ]  ^ _ 6 ` a b c d e f g  h  i  j  k  l  m  n o 7 p q r s t u v w  x  y  z  {  |  }  ~ utf8_print(intToUtf8(1:0x0f), quote = FALSE) [1] \\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\a\\b\\t\\n\\v\\f\\r\\u000e\\u000f print(intToUtf8(1:0x0f), quote = FALSE) [1] \\001\\002\\003\\004\\005\\006\\a\\b\\t\\n\\v\\f\\r\\016\\017"},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"latin-1","dir":"Articles","previous_headings":"UTF-8","what":"Latin-1","title":"Unicode: Emoji, accents, and international text","text":"ASCII works fine text English, languages. Latin-1 encoding extends ASCII Latin languages assigning numbers 128 255 (hexadecimal 0x80 0xff) common characters Latin languages. can see characters . ASCII, first 32 numbers control codes. others characters common Latin languages. Note 0xa3, invalid byte Mansfield Park, corresponds pound sign Latin-1 encoding. Given context byte: probably right symbol. text probably encoded Latin-1, UTF-8 ASCII claimed file. run error reading text claims ASCII, probably encoded Latin-1. Note, however, possibility, many encodings. iconvlist function list ones R knows process:","code":"codes <- matrix(128:255, 8, 16, byrow = TRUE,                 dimnames = list(c(8:9, letters[1:6]), c(0:9, letters[1:6]))) latin1 <- apply(codes, c(1, 2), intToUtf8)  # replace control codes with \"\" latin1[c(\"8\", \"9\"),] <- \"\"  utf8_print(latin1, quote = FALSE) 0 1 2 3 4 5 6 7 8 9 a b c d e f 8                                 9                                 a   ¡ ¢ £ ¤ ¥ ¦ § ¨ © ª « ¬   ® ¯ b ° ± ² ³ ´ µ ¶ · ¸ ¹ º » ¼ ½ ¾ ¿ c À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï d Ð Ñ Ò Ó Ô Õ Ö × Ø Ù Ú Û Ü Ý Þ ß e à á â ã ä å æ ç è é ê ë ì í î ï f ð ñ ò ó ô õ ö ÷ ø ù ú û ü ý þ ÿ lines[15252] [1] \"the command of her beauty, and her \\xa320,000, any one who could satisfy the\" head(iconvlist(), n = 20) [1] \"437\"            \"850\"            \"852\"            \"855\"             [5] \"857\"            \"860\"            \"861\"            \"862\"             [9] \"863\"            \"865\"            \"866\"            \"869\"            [13] \"ANSI_X3.4-1968\" \"ANSI_X3.4-1986\" \"ARABIC\"         \"ARMSCII-8\"      [17] \"ASCII\"          \"ASMO-708\"       \"ATARI\"          \"ATARIST\""},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"utf-8-1","dir":"Articles","previous_headings":"UTF-8","what":"UTF-8","title":"Unicode: Emoji, accents, and international text","text":"256 unique values, single byte enough encode every character. Multi-byte encodings allow encoding . UTF-8 encodes characters using 1 4 bytes allows 1,112,064 character codes. codes currently unassigned, every year Unicode consortium meets adds new characters. can find list characters Unicode Character Database. listing Emoji characters available separately. Say want input Unicode character hexadecimal code 0x2603. can one three ways: characters 0xffff, first method won’t work. Windows, bug current version R (fixed R-devel) prevents using second method. try print Unicode R, system first try determine whether code printable . Non-printable codes include control codes unassigned codes. Mac OS, R uses outdated function make determination, unable print emoji. utf8_print function uses recent version (10.0.0) Unicode standard, print Unicode characters supported system: (Characters codes 0xffff, including emoji, supported Windows.) utf8 package provides following utilities validating, formatting, printing UTF-8 characters: as_utf8() attempts convert character data UTF-8, throwing error data invalid; utf8_valid() tests whether character data valid according declared encoding; utf8_normalize() converts text Unicode composed normal form (NFC), optionally applying case-folding compatibility maps; utf8_encode() encodes character string, escaping control characters, can safely printed screen; utf8_format() formats character vector truncating specified character width limit left, right, center justifying; utf8_print() prints UTF-8 character data screen; utf8_width() measures display UTF-8 character strings (many emoji East Asian characters twice wide characters). package provide method translate another encoding UTF-8 iconv() function base R already serves purpose.","code":"\"\\u2603\"           # with \\u + 4 hex digits [1] \"☃\" \"\\U00002603\"       # with \\U + 8 hex digits [1] \"☃\" intToUtf8(0x2603)  # from an integer [1] \"☃\" print(intToUtf8(0x1f600 + 0:79)) # base R [1] \"\\U0001f600\\U0001f601\\U0001f602\\U0001f603\\U0001f604\\U0001f605\\U0001f606\\U0001f607\\U0001f608\\U0001f609\\U0001f60a\\U0001f60b\\U0001f60c\\U0001f60d\\U0001f60e\\U0001f60f\\U0001f610\\U0001f611\\U0001f612\\U0001f613\\U0001f614\\U0001f615\\U0001f616\\U0001f617\\U0001f618\\U0001f619\\U0001f61a\\U0001f61b\\U0001f61c\\U0001f61d\\U0001f61e\\U0001f61f\\U0001f620\\U0001f621\\U0001f622\\U0001f623\\U0001f624\\U0001f625\\U0001f626\\U0001f627\\U0001f628\\U0001f629\\U0001f62a\\U0001f62b\\U0001f62c\\U0001f62d\\U0001f62e\\U0001f62f\\U0001f630\\U0001f631\\U0001f632\\U0001f633\\U0001f634\\U0001f635\\U0001f636\\U0001f637\\U0001f638\\U0001f639\\U0001f63a\\U0001f63b\\U0001f63c\\U0001f63d\\U0001f63e\\U0001f63f\\U0001f640\\U0001f641\\U0001f642\\U0001f643\\U0001f644\\U0001f645\\U0001f646\\U0001f647\\U0001f648\\U0001f649\\U0001f64a\\U0001f64b\\U0001f64c\\U0001f64d\\U0001f64e\\U0001f64f\" utf8_print(intToUtf8(0x1f600 + 0:79)) # truncates to line width [1] \"😀​😁​😂​😃​😄​😅​😆​😇​😈​😉​😊​😋​😌​😍​😎​😏​😐​😑​😒​😓​😔​😕​😖​😗​😘​😙​😚​😛​😜​😝​😞​😟​😠​😡​😢​😣​…\" utf8_print(intToUtf8(0x1f600 + 0:79), chars = 500) # increase character limit [1] \"😀​😁​😂​😃​😄​😅​😆​😇​😈​😉​😊​😋​😌​😍​😎​😏​😐​😑​😒​😓​😔​😕​😖​😗​😘​😙​😚​😛​😜​😝​😞​😟​😠​😡​😢​😣​😤​😥​😦​😧​😨​😩​😪​😫​😬​😭​😮​😯​😰​😱​😲​😳​😴​😵​😶​😷​😸​😹​😺​😻​😼​😽​😾​😿​🙀​🙁​🙂​🙃​🙄​🙅​🙆​🙇​🙈​🙉​🙊​🙋​🙌​🙍​🙎​🙏​\""},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"translating-to-utf-8","dir":"Articles","previous_headings":"","what":"Translating to UTF-8","title":"Unicode: Emoji, accents, and international text","text":"Back original problem: getting text Mansfield Park R. first attempt failed: discovered problem line 15252: text likely encoded Latin-1, UTF-8 (ASCII) originally thought. can test attempting convert Latin-1 UTF-8 iconv() function inspecting output: worked! Now can analyze text.","code":"corpus::term_stats(lines) Error in corpus::term_stats(lines): argument entry 15252 is incorrectly marked as \"UTF-8\": invalid leading byte (0xA3) at position 36 lines[15252] [1] \"the command of her beauty, and her \\xa320,000, any one who could satisfy the\" lines2 <- iconv(lines, \"latin1\", \"UTF-8\") lines2[15252] [1] \"the command of her beauty, and her £20,000, any one who could satisfy the\" f <- corpus::text_filter(drop_punct = TRUE, drop = corpus::stopwords_en) corpus::term_stats(lines2, f) term     count support 1  fanny      816     806 2  must       508     492 3  crawford   493     488 4  mr         482     466 5  much       459     450 6  miss       432     419 7  said       406     400 8  mrs        408     399 9  sir        372     366 10 edmund     364     364 11 one        370     358 12 think      349     346 13 now        333     331 14 might      324     320 15 time       310     307 16 little     309     300 17 nothing    301     291 18 well       299     286 19 thomas     288     285 20 good       280     275 ⋮  (8450 rows total)"},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"the-readtext-package","dir":"Articles","previous_headings":"","what":"The readtext package","title":"Unicode: Emoji, accents, and international text","text":"need reading single text file, readtext package supports reading text variety file formats encodings. Beyond just plain text, package can read PDFs, Word documents, RTF, many formats. (Unfortunately, package currently fails trying read Mansfield Park; authors aware issue working fix.)","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/articles/utf8.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Unicode: Emoji, accents, and international text","text":"Text comes variety encodings, analyze text without first knowing encoding. Many functions reading text assume encoded UTF-8, assumption sometimes fails hold. get error message reporting UTF-8 text invalid, use utf8_valid find offending texts. Try printing data console using iconv convert character encodings. can use utf8_print print UTF-8 characters R refuses display, including emoji characters. reading exotic file formats like PDF Word, try readtext package.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick O. Perry. Author, copyright holder. Kirill Müller. Maintainer. Unicode, Inc.. Copyright holder, data contributor.           Unicode Character Database","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Perry PO (2025). utf8: Unicode Text Processing. R package version 1.2.6.9001, https://krlmlr.github.io/utf8/.","code":"@Manual{,   title = {utf8: Unicode Text Processing},   author = {Patrick O. Perry},   year = {2025},   note = {R package version 1.2.6.9001},   url = {https://krlmlr.github.io/utf8/}, }"},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"utf8","dir":"","previous_headings":"","what":"Unicode Text Processing","title":"Unicode Text Processing","text":"utf8 R package manipulating printing UTF-8 text fixes multiple bugs R’s UTF-8 handling.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"stable-version","dir":"","previous_headings":"Installation","what":"Stable version","title":"Unicode Text Processing","text":"utf8 available CRAN. install latest released version, run following command R:","code":"install.packages(\"utf8\")"},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Unicode Text Processing","text":"install latest development version, run following:","code":"devtools::install_github(\"patperry/r-utf8\")"},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Unicode Text Processing","text":"","code":"library(utf8)"},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"validate-character-data-and-convert-to-utf-8","dir":"","previous_headings":"Usage","what":"Validate character data and convert to UTF-8","title":"Unicode Text Processing","text":"Use as_utf8() validate input text convert UTF-8 encoding. function alerts input text wrong declared encoding:","code":"# second entry is encoded in latin-1, but declared as UTF-8 x <- c(\"fa\\u00E7ile\", \"fa\\xE7ile\", \"fa\\xC3\\xA7ile\") Encoding(x) <- c(\"UTF-8\", \"UTF-8\", \"bytes\") as_utf8(x) # fails #> Error in as_utf8(x): entry 2 has wrong Encoding; marked as \"UTF-8\" but leading byte 0xE7 followed by invalid continuation byte (0xdeadbeef) at position 4  # mark the correct encoding Encoding(x[2]) <- \"latin1\" as_utf8(x) # succeeds #> [1] \"façile\" \"façile\" \"façile\""},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"normalize-data","dir":"","previous_headings":"Usage","what":"Normalize data","title":"Unicode Text Processing","text":"Use utf8_normalize() convert Unicode composed normal form (NFC). Optionally apply compatibility maps NFKC normal form case-fold.","code":"# three ways to encode an angstrom character (angstrom <- c(\"\\u00c5\", \"\\u0041\\u030a\", \"\\u212b\")) #> [1] \"Å\" \"Å\" \"Å\" utf8_normalize(angstrom) == \"\\u00c5\" #> [1] TRUE TRUE TRUE  # perform full Unicode case-folding utf8_normalize(\"Größe\", map_case = TRUE) #> [1] \"grösse\"  # apply compatibility maps to NFKC normal form # (example from https://twitter.com/aprilarcus/status/367557195186970624) utf8_normalize(\"𝖸𝗈 𝐔𝐧𝐢𝐜𝐨𝐝𝐞 𝗅 𝗁𝖾𝗋𝖽 𝕌 𝗅𝗂𝗄𝖾 𝑡𝑦𝑝𝑒𝑓𝑎𝑐𝑒𝑠 𝗌𝗈 𝗐𝖾 𝗉𝗎𝗍 𝗌𝗈𝗆𝖾 𝚌𝚘𝚍𝚎𝚙𝚘𝚒𝚗𝚝𝚜 𝗂𝗇 𝗒𝗈𝗎𝗋 𝔖𝔲𝔭𝔭𝔩𝔢𝔪𝔢𝔫𝔱𝔞𝔯𝔶 𝔚𝔲𝔩𝔱𝔦𝔩𝔦𝔫𝔤𝔳𝔞𝔩 𝔓𝔩𝔞𝔫𝔢 𝗌𝗈 𝗒𝗈𝗎 𝖼𝖺𝗇 𝓮𝓷𝓬𝓸𝓭𝓮 𝕗𝕠𝕟𝕥𝕤 𝗂𝗇 𝗒𝗈𝗎𝗋 𝒇𝒐𝒏𝒕𝒔.\",                map_compat = TRUE) #> [1] \"Yo Unicode l herd U like typefaces so we put some codepoints in your Supplementary Wultilingval Plane so you can encode fonts in your fonts.\""},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"print-emoji","dir":"","previous_headings":"Usage","what":"Print emoji","title":"Unicode Text Processing","text":"platforms (including MacOS), R implementation print() uses outdated version Unicode standard determine characters printable. Use utf8_print() updated print function:","code":"print(intToUtf8(0xdeadbeefF600 + 0:79)) # with default R print function #> [1] \"😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷😸😹😺😻😼😽😾😿🙀🙁🙂🙃🙄🙅🙆🙇🙈🙉🙊🙋🙌🙍🙎🙏\"  utf8_print(intToUtf8(0xdeadbeefF600 + 0:79)) # with utf8_print, truncates line #> [1] \"😀​😁​😂​😃​😄​😅​😆​😇​😈​😉​😊​😋​😌​😍​😎​😏​😐​😑​😒​😓​😔​😕​😖​😗​😘​😙​😚​😛​😜​😝​😞​😟​😠​😡​😢​😣​…\"  utf8_print(intToUtf8(0xdeadbeefF600 + 0:79), chars = 1000) # higher character limit #> [1] \"😀​😁​😂​😃​😄​😅​😆​😇​😈​😉​😊​😋​😌​😍​😎​😏​😐​😑​😒​😓​😔​😕​😖​😗​😘​😙​😚​😛​😜​😝​😞​😟​😠​😡​😢​😣​😤​😥​😦​😧​😨​😩​😪​😫​😬​😭​😮​😯​😰​😱​😲​😳​😴​😵​😶​😷​😸​😹​😺​😻​😼​😽​😾​😿​🙀​🙁​🙂​🙃​🙄​🙅​🙆​🙇​🙈​🙉​🙊​🙋​🙌​🙍​🙎​🙏​\""},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Unicode Text Processing","text":"Cite utf8 following BibTeX entry:","code":"@Manual{,   title = {utf8: Unicode Text Processing},   author = {Patrick O. Perry},   note = {R package version 1.2.4.9900, https://github.com/patperry/r-utf8},   url = {https://ptrckprry.com/r-utf8/}, }"},{"path":"https://krlmlr.github.io/r-utf8/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Unicode Text Processing","text":"project maintainer welcomes contributions form feature requests, bug reports, comments, unit tests, vignettes, code. ’d like contribute, either fork repository submit pull request file issue; contact maintainer via e-mail. project released Contributor Code Conduct, choose contribute, must adhere terms.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/as_utf8.html","id":null,"dir":"Reference","previous_headings":"","what":"UTF-8 Character Encoding — as_utf8","title":"UTF-8 Character Encoding — as_utf8","text":"UTF-8 text encoding validation as_utf8() converts character object declared encoding valid UTF-8 character object, throws error conversion possible. normalize = TRUE, text gets transformed Unicode composed normal form (NFC) conversion UTF-8. utf8_valid() tests whether elements character object can translated valid UTF-8 strings.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/as_utf8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTF-8 Character Encoding — as_utf8","text":"","code":"as_utf8(x, normalize = FALSE)  utf8_valid(x)"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/as_utf8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UTF-8 Character Encoding — as_utf8","text":"x character object. normalize logical value indicating whether convert Unicode composed normal form (NFC).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/as_utf8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UTF-8 Character Encoding — as_utf8","text":"as_utf8(), result character object attributes x Encoding set \"UTF-8\". utf8_valid() logical object names, dim, dimnames x.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/as_utf8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UTF-8 Character Encoding — as_utf8","text":"","code":"# the second element is encoded in latin-1, but declared as UTF-8 x <- c(\"fa\\u00E7ile\", \"fa\\xE7ile\", \"fa\\xC3\\xA7ile\") Encoding(x) <- c(\"UTF-8\", \"UTF-8\", \"bytes\")  # attempt to convert to UTF-8 (fails) if (FALSE) as_utf8(x) # \\dontrun{}  y <- x Encoding(y[2]) <- \"latin1\" # mark the correct encoding as_utf8(y) # succeeds #> [1] \"façile\" \"façile\" \"façile\"  # test for valid UTF-8 utf8_valid(x) #> [1]  TRUE FALSE  TRUE"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/output_utf8.html","id":null,"dir":"Reference","previous_headings":"","what":"Output Capabilities — output_ansi","title":"Output Capabilities — output_ansi","text":"Test whether output connection ANSI style escape support UTF-8 support.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/output_utf8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Capabilities — output_ansi","text":"","code":"output_ansi()  output_utf8()"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/output_utf8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output Capabilities — output_ansi","text":"logical scalar indicating whether output connection supports given capability.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/output_utf8.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output Capabilities — output_ansi","text":"output_ansi() tests whether output connection supports ANSI style escapes. TRUE connection terminal Windows GUI. Otherwise, true running RStudio 1.1 later ANSI escapes enabled, provided stdout() redirected another connection sink(). output_utf8() tests whether output connection supports UTF-8. platforms l10n_info()$\"UTF-8\" gives information, give accurate result Windows GUIs. work around , proceed follows: character locale (LC_CTYPE) \"C\", result FALSE; otherwise, l10n_info()$\"UTF-8\" TRUE, result TRUE; running Windows, result TRUE; cases result FALSE. Strictly speaking, UTF-8 support always available Windows GUI, subset UTF-8 available (defined current character locale) output redirected knitr another process. Unfortunately, impossible set character locale UTF-8 Windows. , utf8 package handles two character locales: C UTF-8.  get around , Windows, treat non-C locales platform UTF-8. liberal approach means characters user's locale never get escaped; others get output <U+XXXX>, incorrect values utf8_width().","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/output_utf8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output Capabilities — output_ansi","text":"","code":"# test whether ANSI style escapes or UTF-8 output are supported cat(\"ANSI:\", output_ansi(), \"\\n\") #> ANSI: FALSE  cat(\"UTF8:\", output_utf8(), \"\\n\") #> UTF8: TRUE   # switch to C locale Sys.setlocale(\"LC_CTYPE\", \"C\") #> [1] \"C\" cat(\"ANSI:\", output_ansi(), \"\\n\") #> ANSI: FALSE  cat(\"UTF8:\", output_utf8(), \"\\n\") #> UTF8: FALSE   # switch to native locale Sys.setlocale(\"LC_CTYPE\", \"\") #> [1] \"C.UTF-8\"  tmp <- tempfile() sink(tmp) # redirect output to a file cat(\"ANSI:\", output_ansi(), \"\\n\") cat(\"UTF8:\", output_utf8(), \"\\n\") sink() # restore stdout  # inspect the output readLines(tmp) #> [1] \"ANSI: FALSE \" \"UTF8: TRUE \""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The utf8 Package — utf8-package","title":"The utf8 Package — utf8-package","text":"UTF-8 Text Processing","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The utf8 Package — utf8-package","text":"Functions manipulating printing UTF-8 encoded text: as_utf8() attempts convert character data UTF-8, throwing error data invalid; utf8_valid() tests whether character data valid according declared encoding; utf8_normalize() converts text Unicode composed normal form (NFC), optionally applying case-folding compatibility maps; utf8_encode() encodes character string, escaping control characters, can safely printed screen; utf8_format() formats character vector truncating specified character width limit left, right, center justifying; utf8_print() prints UTF-8 character data screen; utf8_width() measures display width UTF-8 character strings (many emoji East Asian characters twice wide characters); output_ansi() output_utf8() test output connections capabilities. complete list functions, use library(help = \"utf8\").","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The utf8 Package — utf8-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID) Authors: Patrick O. Perry [copyright holder] contributors: Unicode, Inc. (Unicode Character Database) [copyright holder, data contributor]","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_encode.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode Character Object as for UTF-8 Printing — utf8_encode","title":"Encode Character Object as for UTF-8 Printing — utf8_encode","text":"Escape strings character object, optionally adding quotes spaces, adjusting width display.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_encode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode Character Object as for UTF-8 Printing — utf8_encode","text":"","code":"utf8_encode(   x,   ...,   width = 0L,   quote = FALSE,   justify = \"left\",   escapes = NULL,   display = FALSE,   utf8 = NULL )"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_encode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode Character Object as for UTF-8 Printing — utf8_encode","text":"x character object. ... dots future extensions must empty. width integer giving minimum field width; specify NULL NA minimum. quote logical scalar indicating whether surround results double-quotes escape internal double-quotes. justify justification; one \"left\", \"right\", \"centre\", \"none\". Can abbreviated. escapes character string specifying display style backslash escapes, ANSI SGR parameter string, NULL styling. display logical scalar indicating whether optimize encoding display, byte--byte data transmission. utf8 logical scalar indicating whether encode UTF-8 capable display (ASCII-otherwise), NULL encode output capabilities determined output_utf8().","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_encode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode Character Object as for UTF-8 Printing — utf8_encode","text":"character object attributes x Encoding set \"UTF-8\".","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_encode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encode Character Object as for UTF-8 Printing — utf8_encode","text":"utf8_encode() encodes character object printing UTF-8 device escaping controls characters non-printable characters. display = TRUE, function optimizes encoding display removing default ignorable characters (soft hyphens, zero-width spaces, etc.) placing zero-width spaces wide emoji. output_utf8() FALSE function escapes non-ASCII characters gives results platforms.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_encode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encode Character Object as for UTF-8 Printing — utf8_encode","text":"","code":"# the second element is encoded in latin-1, but declared as UTF-8 x <- c(\"fa\\u00E7ile\", \"fa\\xE7ile\", \"fa\\xC3\\xA7ile\") Encoding(x) <- c(\"UTF-8\", \"UTF-8\", \"bytes\")  # encoding utf8_encode(x) #> [1] \"façile\"          \"fa\\\\xe7ile\"      \"fa\\\\xc3\\\\xa7ile\"  # add style to the escapes cat(utf8_encode(\"hello\\nstyled\\\\world\", escapes = \"1\"), \"\\n\") #> hello\\nstyled\\\\world"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_format.html","id":null,"dir":"Reference","previous_headings":"","what":"UTF-8 Text Formatting — utf8_format","title":"UTF-8 Text Formatting — utf8_format","text":"Format character object UTF-8 printing.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UTF-8 Text Formatting — utf8_format","text":"","code":"utf8_format(   x,   ...,   trim = FALSE,   chars = NULL,   justify = \"left\",   width = NULL,   na.encode = TRUE,   quote = FALSE,   na.print = NULL,   print.gap = NULL,   utf8 = NULL )"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UTF-8 Text Formatting — utf8_format","text":"x character object. ... dots future extensions must empty. trim logical scalar indicating whether suppress padding spaces around elements. chars integer scalar indicating maximum number character units display.  Wide characters like emoji take two character units; combining marks default ignorables take none. Longer strings get truncated suffixed prefixed ellipsis (\"...\" \"\\u2026\", whichever appropriate current character locale). Set NULL limit output line width determined getOption(\"width\"). justify justification; one \"left\", \"right\", \"centre\", \"none\". Can abbreviated. width minimum field width; set NULL 0 restriction. na.encode logical scalar indicating whether encode NA values character strings. quote logical scalar indicating whether format context surrounding double-quotes ('\"') escaped internal double-quotes. na.print character string (NULL) indicating encoding NA values. Ignored na.encode FALSE. print.gap non-negative integer (NULL) giving number spaces gaps columns; set NULL 1 single space. utf8 logical scalar indicating whether format UTF-8 capable display (ASCII-otherwise), NULL format output capabilities determined output_utf8().","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UTF-8 Text Formatting — utf8_format","text":"character object attributes x Encoding set \"UTF-8\" elements can converted valid UTF-8 \"bytes\" others.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_format.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UTF-8 Text Formatting — utf8_format","text":"utf8_format() formats character object printing, optionally truncating long character strings.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UTF-8 Text Formatting — utf8_format","text":"","code":"# the second element is encoded in latin-1, but declared as UTF-8 x <- c(\"fa\\u00E7ile\", \"fa\\xE7ile\", \"fa\\xC3\\xA7ile\") Encoding(x) <- c(\"UTF-8\", \"UTF-8\", \"bytes\")  # formatting utf8_format(x, chars = 3) #> [1] \"faç…\"  \"fa...\" \"fa...\" utf8_format(x, chars = 3, justify = \"centre\", width = 10) #> [1] \"   faç…   \" \"  fa...   \" \"  fa...   \" utf8_format(x, chars = 3, justify = \"right\") #> [1] \"…ile\"       \"...\\\\xe7ile\" \"...\\\\xa7ile\""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Text Normalization — utf8_normalize","title":"Text Normalization — utf8_normalize","text":"Transform text normalized form, optionally mapping lowercase applying compatibility maps.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text Normalization — utf8_normalize","text":"","code":"utf8_normalize(   x,   ...,   map_case = FALSE,   map_compat = FALSE,   map_quote = FALSE,   remove_ignorable = FALSE )"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text Normalization — utf8_normalize","text":"x character object. ... dots future extensions must empty. map_case logical value indicating whether apply Unicode case mapping text. languages, transformation changes uppercase characters lowercase equivalents. map_compat logical value indicating whether apply Unicode compatibility mappings characters, required NFKC NFKD normal forms. map_quote logical value indicating whether replace curly single quotes Unicode apostrophe characters ASCII apostrophe (U+0027). remove_ignorable logical value indicating whether remove Unicode \"default ignorable\" characters like zero-width spaces soft hyphens.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text Normalization — utf8_normalize","text":"result character object attributes x Encoding set \"UTF-8\".","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Text Normalization — utf8_normalize","text":"utf8_normalize() converts elements character object Unicode normalized composed form (NFC) applying character maps specified map_case, map_compat, map_quote, remove_ignorable arguments.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text Normalization — utf8_normalize","text":"","code":"angstrom <- c(\"\\u00c5\", \"\\u0041\\u030a\", \"\\u212b\") utf8_normalize(angstrom) == \"\\u00c5\" #> [1] TRUE TRUE TRUE"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print UTF-8 Text — utf8_print","title":"Print UTF-8 Text — utf8_print","text":"Print UTF-8 character object.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print UTF-8 Text — utf8_print","text":"","code":"utf8_print(   x,   ...,   chars = NULL,   quote = TRUE,   na.print = NULL,   print.gap = NULL,   right = FALSE,   max = NULL,   names = NULL,   rownames = NULL,   escapes = NULL,   display = TRUE,   style = TRUE,   utf8 = NULL )"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print UTF-8 Text — utf8_print","text":"x character object. ... dots future extensions must empty. chars integer scalar indicating maximum number character units display.  Wide characters like emoji take two character units; combining marks default ignorables take none. Longer strings get truncated suffixed prefixed ellipsis (\"...\" C locale, \"\\u2026\" others). Set NULL limit output line width determined getOption(\"width\"). quote logical scalar indicating whether put surrounding double-quotes ('\"') around character strings escape internal double-quotes. na.print character string (NULL) indicating encoding NA values. Ignored na.encode FALSE. print.gap non-negative integer (NULL) giving number spaces gaps columns; set NULL 1 single space. right logical scalar indicating whether right-justify character strings. max non-negative integer (NULL) indicating maximum number elements print; set getOption(\"max.print\") argument NULL. names character string specifying display style (column) names, ANSI SGR parameter string. rownames character string specifying display style row names, ANSI SGR parameter string. escapes character string specifying display style backslash escapes, ANSI SGR parameter string. display logical scalar indicating whether optimize encoding display, byte--byte data transmission. style logical scalar indicating whether apply ANSI terminal escape codes style output.  Ignored output_ansi() FALSE. utf8 logical scalar indicating whether optimize results UTF-8 capable display, NULL set result output_utf8(). Ignored output_utf8() FALSE.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print UTF-8 Text — utf8_print","text":"function returns x invisibly.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print UTF-8 Text — utf8_print","text":"utf8_print() prints character object formatting utf8_format(). ANSI terminal output (output_ansi() TRUE), can style row column names rownames names parameters, specifying ANSI SGR parameter string; see https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print UTF-8 Text — utf8_print","text":"","code":"# printing (assumes that output is capable of displaying Unicode 10.0.0) print(intToUtf8(0x1F600 + 0:79)) # with default R print function #> [1] \"😀😁😂😃😄😅😆😇😈😉😊😋😌😍😎😏😐😑😒😓😔😕😖😗😘😙😚😛😜😝😞😟😠😡😢😣😤😥😦😧😨😩😪😫😬😭😮😯😰😱😲😳😴😵😶😷😸😹😺😻😼😽😾😿🙀🙁🙂🙃🙄🙅🙆🙇🙈🙉🙊🙋🙌🙍🙎🙏\" utf8_print(intToUtf8(0x1F600 + 0:79)) # with utf8_print, truncates line #> [1] \"😀​😁​😂​😃​😄​😅​😆​😇​😈​😉​😊​😋​😌​😍​😎​😏​😐​😑​😒​😓​😔​😕​😖​😗​😘​😙​😚​😛​😜​😝​😞​😟​😠​😡​😢​😣​…\" utf8_print(intToUtf8(0x1F600 + 0:79), chars = 1000) # higher character limit #> [1] \"😀​😁​😂​😃​😄​😅​😆​😇​😈​😉​😊​😋​😌​😍​😎​😏​😐​😑​😒​😓​😔​😕​😖​😗​😘​😙​😚​😛​😜​😝​😞​😟​😠​😡​😢​😣​😤​😥​😦​😧​😨​😩​😪​😫​😬​😭​😮​😯​😰​😱​😲​😳​😴​😵​😶​😷​😸​😹​😺​😻​😼​😽​😾​😿​🙀​🙁​🙂​🙃​🙄​🙅​🙆​🙇​🙈​🙉​🙊​🙋​🙌​🙍​🙎​🙏​\"  # in C locale, output ASCII (same results on all platforms) oldlocale <- Sys.getlocale(\"LC_CTYPE\") invisible(Sys.setlocale(\"LC_CTYPE\", \"C\")) # switch to C locale utf8_print(intToUtf8(0x1F600 + 0:79)) #> [1] \"\\U0001f600\\U0001f601\\U0001f602\\U0001f603\\U0001f604\\U0001f605\\U0001f606...\" invisible(Sys.setlocale(\"LC_CTYPE\", oldlocale)) # switch back to old locale  # Mac and Linux only: style the names # see https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters utf8_print(matrix(as.character(1:20), 4, 5),            names = \"1;4\", rownames = \"2;3\") #>      [,1] [,2] [,3] [,4] [,5] #> [1,] \"1\"  \"5\"  \"9\"  \"13\" \"17\" #> [2,] \"2\"  \"6\"  \"10\" \"14\" \"18\" #> [3,] \"3\"  \"7\"  \"11\" \"15\" \"19\" #> [4,] \"4\"  \"8\"  \"12\" \"16\" \"20\""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure the Character String Width — utf8_width","title":"Measure the Character String Width — utf8_width","text":"Compute display widths elements character object.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure the Character String Width — utf8_width","text":"","code":"utf8_width(x, ..., encode = TRUE, quote = FALSE, utf8 = NULL)"},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure the Character String Width — utf8_width","text":"x character object. ... dots future extensions must empty. encode whether encode object measuring width. quote whether quote object measuring width. utf8 logical scalar indicating whether determine widths assuming UTF-8 capable display (ASCII-otherwise), NULL format output capabilities determined output_utf8().","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure the Character String Width — utf8_width","text":"integer object, names, dim, dimnames x.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_width.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure the Character String Width — utf8_width","text":"utf8_width() returns printed widths elements character object UTF-8 device (ASCII device output_utf8() FALSE), printed utf8_print(). string printable device, example contains control code like \"\\n\", result NA. encode = TRUE, default, function returns widths encoded elements via utf8_encode()); otherwise, function returns widths original elements.","code":""},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/reference/utf8_width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure the Character String Width — utf8_width","text":"","code":"# the second element is encoded in latin-1, but declared as UTF-8 x <- c(\"fa\\u00E7ile\", \"fa\\xE7ile\", \"fa\\xC3\\xA7ile\") Encoding(x) <- c(\"UTF-8\", \"UTF-8\", \"bytes\")  # get widths utf8_width(x) #> [1]  6  9 13 utf8_width(x, encode = FALSE) #> [1]  6 NA NA utf8_width('\"') #> [1] 1 utf8_width('\"', quote = TRUE) #> [1] 4"},{"path":[]},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"continuous-integration-1-2-6-9001","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"utf8 1.2.6.9001 (2025-06-13)","text":"Try break R 4.1 builds adding configure.win.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-1269000-2025-06-09","dir":"Changelog","previous_headings":"","what":"utf8 1.2.6.9000 (2025-06-09)","title":"utf8 1.2.6.9000 (2025-06-09)","text":"Switching development version.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-126-2025-06-08","dir":"Changelog","previous_headings":"","what":"utf8 1.2.6 (2025-06-08)","title":"utf8 1.2.6 (2025-06-08)","text":"CRAN release: 2025-06-08","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"chore-1-2-6","dir":"Changelog","previous_headings":"","what":"Chore","title":"utf8 1.2.6 (2025-06-08)","text":"Format air.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"continuous-integration-1-2-6","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"utf8 1.2.6 (2025-06-08)","text":"Enhance permissions workflow (#77).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"documentation-1-2-6","dir":"Changelog","previous_headings":"","what":"Documentation","title":"utf8 1.2.6 (2025-06-08)","text":"Fix URL (@olivroy, #78).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-125-2025-05-01","dir":"Changelog","previous_headings":"","what":"utf8 1.2.5 (2025-05-01)","title":"utf8 1.2.5 (2025-05-01)","text":"CRAN release: 2025-05-01","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"features-1-2-5","dir":"Changelog","previous_headings":"","what":"Features","title":"utf8 1.2.5 (2025-05-01)","text":"Strict argument checking utf8_format() utf8_print(), extra arguments allowed.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"chore-1-2-5","dir":"Changelog","previous_headings":"","what":"Chore","title":"utf8 1.2.5 (2025-05-01)","text":"Replace [v]sprintf() [v]snprintf() (#67). Add direct include snprintf() (@MichaelChirico, #43). Add ellipsis optional args (#74).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"documentation-1-2-5","dir":"Changelog","previous_headings":"","what":"Documentation","title":"utf8 1.2.5 (2025-05-01)","text":"Show NEWS CRAN page (#42, #71). Add pkgdown reference index. Use roxygen2 (#68, #69) Markdown.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"performance-1-2-5","dir":"Changelog","previous_headings":"","what":"Performance","title":"utf8 1.2.5 (2025-05-01)","text":"Check interrupt every 1024 calls, avoids division tight loops.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-124-2023-10-16","dir":"Changelog","previous_headings":"","what":"utf8 1.2.4 (2023-10-16)","title":"utf8 1.2.4 (2023-10-16)","text":"CRAN release: 2023-10-22 Fix compatibility macOS 14 (#39).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-123-2023-01-30","dir":"Changelog","previous_headings":"","what":"utf8 1.2.3 (2023-01-30)","title":"utf8 1.2.3 (2023-01-30)","text":"CRAN release: 2023-01-31","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"features-1-2-3","dir":"Changelog","previous_headings":"","what":"Features","title":"utf8 1.2.3 (2023-01-30)","text":"Support Unicode 14.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"chore-1-2-3","dir":"Changelog","previous_headings":"","what":"Chore","title":"utf8 1.2.3 (2023-01-30)","text":"Update maintainer e-mail address. Fix compiler warnings (@Antonov548, #37).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-122-2021-07-24","dir":"Changelog","previous_headings":"","what":"utf8 1.2.2 (2021-07-24)","title":"utf8 1.2.2 (2021-07-24)","text":"CRAN release: 2021-07-24 Reenable tests. utf8_width() now reports correct widths narrow emojis (#9).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-121-2021-03-10","dir":"Changelog","previous_headings":"","what":"utf8 1.2.1 (2021-03-10)","title":"utf8 1.2.1 (2021-03-10)","text":"CRAN release: 2021-03-12 Use Unicode Emoji standards version 13.0 via upgrade latest utf8lite. Silence test macOS.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-114-2018-05-24","dir":"Changelog","previous_headings":"","what":"utf8 1.1.4 (2018-05-24)","title":"utf8 1.1.4 (2018-05-24)","text":"CRAN release: 2018-05-24","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"bug-fixes-1-1-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"utf8 1.1.4 (2018-05-24)","text":"Fix build Solaris (#7, reported @krlmlr). Fix rendering emoji ZWJ sequences like \"\\U1F469\\U200D\\U2764\\UFE0F\\U200D\\U1F48B\\U200D\\U1F469\".","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-113-2018-01-03","dir":"Changelog","previous_headings":"","what":"utf8 1.1.3 (2018-01-03)","title":"utf8 1.1.3 (2018-01-03)","text":"CRAN release: 2018-01-03","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"minor-improvements-1-1-3","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"utf8 1.1.3 (2018-01-03)","text":"Make output_utf8() always return TRUE Windows, characters user’s native locale don’t get escaped utf8_encode(). downside change Windows, utf8_width() reports wrong values characters outside user’s locale stdout() redirected knitr another process. truncating long strings strings via utf8_format(), use ellipsis printable user’s native locale (\"\\u2026\" “…”`).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-112-2017-12-14","dir":"Changelog","previous_headings":"","what":"utf8 1.1.2 (2017-12-14)","title":"utf8 1.1.2 (2017-12-14)","text":"CRAN release: 2017-12-14","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"bug-fixes-1-1-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"utf8 1.1.2 (2017-12-14)","text":"Fix bug utf8_format() non-NULL width argument.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-111-2017-11-28","dir":"Changelog","previous_headings":"","what":"utf8 1.1.1 (2017-11-28)","title":"utf8 1.1.1 (2017-11-28)","text":"CRAN release: 2017-11-29","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"utf8 1.1.1 (2017-11-28)","text":"Fix PROTECT bug as_utf8().","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-110-2017-11-20","dir":"Changelog","previous_headings":"","what":"utf8 1.1.0 (2017-11-20)","title":"utf8 1.1.0 (2017-11-20)","text":"CRAN release: 2017-11-20","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"utf8 1.1.0 (2017-11-20)","text":"Added output_ansi() output_utf8() functions test output capabilities.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"utf8 1.1.0 (2017-11-20)","text":"Add utf8 argument utf8_encode(), utf8_format(), utf8_print(), utf8_width() precise control assumed output capabilities; defaults result output_utf8(). Add ability style backslash escapes escapes arguments utf8_encode() utf8_print(). Switch “faint” styling styling default. Slightly reword error messages as_utf8(). Fix (spurious) rchk warnings.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"utf8 1.1.0 (2017-11-20)","text":"Fix bug utf8_width() determining width non-ASCII strings LC_CTYPE=C.","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"deprecated-and-defunct-1-1-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"utf8 1.1.0 (2017-11-20)","text":"longer export C version as_utf8() (R version still present).","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"utf8-100-2017-11-06","dir":"Changelog","previous_headings":"","what":"utf8 1.0.0 (2017-11-06)","title":"utf8 1.0.0 (2017-11-06)","text":"CRAN release: 2017-11-07","code":""},{"path":"https://krlmlr.github.io/r-utf8/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"utf8 1.0.0 (2017-11-06)","text":"Split functions as_utf8(), utf8_valid(), utf8_normalize(), utf8_encode(), utf8_format(), utf8_print(), utf8_width() corpus package. Added special handling Unicode grapheme clusters formatting width measurement functions. Added ANSI styling escape sequences. Added ability style row column names utf8_print().","code":""}]
